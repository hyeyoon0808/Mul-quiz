{"version":3,"file":"mobxreactlite.esm.js","sources":["../src/assertEnvironment.ts","../src/staticRendering.ts","../src/utils.ts","../src/observerBatching.ts","../src/printDebugValue.ts","../src/reactionCleanupTracking.ts","../src/useObserver.ts","../src/observer.ts","../src/ObserverComponent.ts","../src/useAsObservableSource.ts","../src/useLocalStore.ts"],"sourcesContent":["import { spy } from \"mobx\"\nimport { useState } from \"react\"\n\nif (!useState) {\n    throw new Error(\"mobx-react-lite requires React with Hooks support\")\n}\nif (!spy) {\n    throw new Error(\"mobx-react-lite requires mobx at least version 4 to be available\")\n}\n","let globalIsUsingStaticRendering = false\n\nexport function useStaticRendering(enable: boolean) {\n    globalIsUsingStaticRendering = enable\n}\n\nexport function isUsingStaticRendering(): boolean {\n    return globalIsUsingStaticRendering\n}\n","import { useCallback, useEffect, useState } from \"react\"\n\nconst EMPTY_ARRAY: any[] = []\n\nexport function useUnmount(fn: () => void) {\n    useEffect(() => fn, EMPTY_ARRAY)\n}\n\nexport function useForceUpdate() {\n    const [, setTick] = useState(0)\n\n    const update = useCallback(() => {\n        setTick(tick => tick + 1)\n    }, [])\n\n    return update\n}\n\nexport function isPlainObject(value: any): value is object {\n    if (!value || typeof value !== \"object\") {\n        return false\n    }\n    const proto = Object.getPrototypeOf(value)\n    return !proto || proto === Object.prototype\n}\n\nexport function getSymbol(name: string): symbol | string {\n    if (typeof Symbol === \"function\") {\n        return Symbol.for(name)\n    }\n    return `__$mobx-react ${name}__`\n}\n\ndeclare const window: any\ndeclare const self: any\n\nconst mockGlobal = {}\n\nexport function getGlobal() {\n    if (typeof window !== \"undefined\") {\n        return window\n    }\n    if (typeof global !== \"undefined\") {\n        return global\n    }\n    if (typeof self !== \"undefined\") {\n        return self\n    }\n    return mockGlobal\n}\n","import { configure } from \"mobx\"\n\nimport { getGlobal, getSymbol } from \"./utils\"\n\ninterface IBatchedUpdates {\n    batchedUpdates<A, B>(callback: (a: A, b: B) => any, a: A, b: B): void\n    batchedUpdates<A>(callback: (a: A) => any, a: A): void\n    batchedUpdates(callback: () => any): void\n}\n\nconst observerBatchingConfiguredSymbol = getSymbol(\"observerBatching\")\n\nexport const observerBatching = (reactionScheduler?: IBatchedUpdates) => {\n    if (typeof reactionScheduler === \"function\") {\n        configure({ reactionScheduler })\n    }\n    getGlobal()[observerBatchingConfiguredSymbol] = true\n}\n\nexport const observerBatchingOptOut = () => {\n    configure({ reactionScheduler: undefined })\n    getGlobal()[observerBatchingConfiguredSymbol] = true\n}\n\nexport const isObserverBatched = () => getGlobal()[observerBatchingConfiguredSymbol]\n","import { getDependencyTree, Reaction } from \"mobx\"\n\nexport function printDebugValue(v: Reaction) {\n    return getDependencyTree(v)\n}\n","import { Reaction } from \"mobx\"\n\nexport interface IReactionTracking {\n    /** The Reaction created during first render, which may be leaked */\n    reaction: Reaction\n    /**\n     * The time (in ticks) at which point we should dispose of the reaction\n     * if this component hasn't yet been fully mounted.\n     */\n    cleanAt: number\n\n    /**\n     * Whether the component has yet completed mounting (for us, whether\n     * its useEffect has run)\n     */\n    mounted?: boolean\n\n    /**\n     * Whether the observables that the component is tracking changed between\n     * the first render and the first useEffect.\n     */\n    changedBeforeMount?: boolean\n}\n\nexport function createTrackingData(reaction: Reaction) {\n    const trackingData: IReactionTracking = {\n        cleanAt: Date.now() + CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS,\n        reaction\n    }\n    return trackingData\n}\n\n/**\n * The minimum time before we'll clean up a Reaction created in a render\n * for a component that hasn't managed to run its effects. This needs to\n * be big enough to ensure that a component won't turn up and have its\n * effects run without being re-rendered.\n */\nexport const CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS = 10_000\n\n/**\n * The frequency with which we'll check for leaked reactions.\n */\nexport const CLEANUP_TIMER_LOOP_MILLIS = 10_000\n\n/**\n * Reactions created by components that have yet to be fully mounted.\n */\nconst uncommittedReactionRefs: Set<React.MutableRefObject<IReactionTracking | null>> = new Set()\n\n/**\n * Latest 'uncommitted reactions' cleanup timer handle.\n */\nlet reactionCleanupHandle: ReturnType<typeof setTimeout> | undefined\n\nfunction ensureCleanupTimerRunning() {\n    if (reactionCleanupHandle === undefined) {\n        reactionCleanupHandle = setTimeout(cleanUncommittedReactions, CLEANUP_TIMER_LOOP_MILLIS)\n    }\n}\n\nexport function scheduleCleanupOfReactionIfLeaked(\n    ref: React.MutableRefObject<IReactionTracking | null>\n) {\n    uncommittedReactionRefs.add(ref)\n\n    ensureCleanupTimerRunning()\n}\n\nexport function recordReactionAsCommitted(\n    reactionRef: React.MutableRefObject<IReactionTracking | null>\n) {\n    uncommittedReactionRefs.delete(reactionRef)\n}\n\n/**\n * Run by the cleanup timer to dispose any outstanding reactions\n */\nfunction cleanUncommittedReactions() {\n    reactionCleanupHandle = undefined\n\n    // Loop through all the candidate leaked reactions; those older\n    // than CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS get tidied.\n\n    const now = Date.now()\n    uncommittedReactionRefs.forEach(ref => {\n        const tracking = ref.current\n        if (tracking) {\n            if (now >= tracking.cleanAt) {\n                // It's time to tidy up this leaked reaction.\n                tracking.reaction.dispose()\n                ref.current = null\n                uncommittedReactionRefs.delete(ref)\n            }\n        }\n    })\n\n    if (uncommittedReactionRefs.size > 0) {\n        // We've just finished a round of cleanups but there are still\n        // some leak candidates outstanding.\n        ensureCleanupTimerRunning()\n    }\n}\n\n/* istanbul ignore next */\n/**\n * Only to be used by test functions; do not export outside of mobx-react-lite\n */\nexport function forceCleanupTimerToRunNowForTests() {\n    // This allows us to control the execution of the cleanup timer\n    // to force it to run at awkward times in unit tests.\n    if (reactionCleanupHandle) {\n        clearTimeout(reactionCleanupHandle)\n        cleanUncommittedReactions()\n    }\n}\n\n/* istanbul ignore next */\nexport function resetCleanupScheduleForTests() {\n    if (reactionCleanupHandle) {\n        clearTimeout(reactionCleanupHandle)\n        reactionCleanupHandle = undefined\n    }\n    uncommittedReactionRefs.clear()\n}\n","import { Reaction } from \"mobx\"\nimport React from \"react\"\n\nimport { isObserverBatched } from \"./observerBatching\"\nimport { printDebugValue } from \"./printDebugValue\"\nimport {\n    createTrackingData,\n    IReactionTracking,\n    recordReactionAsCommitted,\n    scheduleCleanupOfReactionIfLeaked\n} from \"./reactionCleanupTracking\"\nimport { isUsingStaticRendering } from \"./staticRendering\"\nimport { useForceUpdate } from \"./utils\"\n\nexport type ForceUpdateHook = () => () => void\n\nexport interface IUseObserverOptions {\n    useForceUpdate?: ForceUpdateHook\n}\n\nconst EMPTY_OBJECT = {}\n\nfunction observerComponentNameFor(baseComponentName: string) {\n    return `observer${baseComponentName}`\n}\n\nlet warnedAboutBatching = false\n\nexport function useObserver<T>(\n    fn: () => T,\n    baseComponentName: string = \"observed\",\n    options: IUseObserverOptions = EMPTY_OBJECT\n): T {\n    if (isUsingStaticRendering()) {\n        return fn()\n    }\n\n    if (__DEV__ && !warnedAboutBatching && !isObserverBatched()) {\n        console.warn(\n            `[MobX] You haven't configured observer batching which might result in unexpected behavior in some cases. See more at https://github.com/mobxjs/mobx-react-lite/#observer-batching`\n        )\n        warnedAboutBatching = true\n    }\n\n    const wantedForceUpdateHook = options.useForceUpdate || useForceUpdate\n    const forceUpdate = wantedForceUpdateHook()\n\n    // StrictMode/ConcurrentMode/Suspense may mean that our component is\n    // rendered and abandoned multiple times, so we need to track leaked\n    // Reactions.\n    const reactionTrackingRef = React.useRef<IReactionTracking | null>(null)\n\n    if (!reactionTrackingRef.current) {\n        // First render for this component (or first time since a previous\n        // reaction from an abandoned render was disposed).\n\n        const newReaction = new Reaction(observerComponentNameFor(baseComponentName), () => {\n            // Observable has changed, meaning we want to re-render\n            // BUT if we're a component that hasn't yet got to the useEffect()\n            // stage, we might be a component that _started_ to render, but\n            // got dropped, and we don't want to make state changes then.\n            // (It triggers warnings in StrictMode, for a start.)\n            if (trackingData.mounted) {\n                // We have reached useEffect(), so we're mounted, and can trigger an update\n                forceUpdate()\n            } else {\n                // We haven't yet reached useEffect(), so we'll need to trigger a re-render\n                // when (and if) useEffect() arrives.  The easiest way to do that is just to\n                // drop our current reaction and allow useEffect() to recreate it.\n                newReaction.dispose()\n                reactionTrackingRef.current = null\n            }\n        })\n\n        const trackingData = createTrackingData(newReaction)\n        reactionTrackingRef.current = trackingData\n        scheduleCleanupOfReactionIfLeaked(reactionTrackingRef)\n    }\n\n    const { reaction } = reactionTrackingRef.current!\n    React.useDebugValue(reaction, printDebugValue)\n\n    React.useEffect(() => {\n        // Called on first mount only\n        recordReactionAsCommitted(reactionTrackingRef)\n\n        if (reactionTrackingRef.current) {\n            // Great. We've already got our reaction from our render;\n            // all we need to do is to record that it's now mounted,\n            // to allow future observable changes to trigger re-renders\n            reactionTrackingRef.current.mounted = true\n        } else {\n            // The reaction we set up in our render has been disposed.\n            // This is either due to bad timings of renderings, e.g. our\n            // component was paused for a _very_ long time, and our\n            // reaction got cleaned up, or we got a observable change\n            // between render and useEffect\n\n            // Re-create the reaction\n            reactionTrackingRef.current = {\n                reaction: new Reaction(observerComponentNameFor(baseComponentName), () => {\n                    // We've definitely already been mounted at this point\n                    forceUpdate()\n                }),\n                cleanAt: Infinity\n            }\n            forceUpdate()\n        }\n\n        return () => {\n            reactionTrackingRef.current!.reaction.dispose()\n            reactionTrackingRef.current = null\n        }\n    }, [])\n\n    // render the original component, but have the\n    // reaction track the observables, so that rendering\n    // can be invalidated (see above) once a dependency changes\n    let rendering!: T\n    let exception\n    reaction.track(() => {\n        try {\n            rendering = fn()\n        } catch (e) {\n            exception = e\n        }\n    })\n    if (exception) {\n        throw exception // re-throw any exceptions catched during rendering\n    }\n    return rendering\n}\n","import { forwardRef, memo } from \"react\"\n\nimport { isUsingStaticRendering } from \"./staticRendering\"\nimport { useObserver } from \"./useObserver\"\n\nexport interface IObserverOptions {\n    readonly forwardRef?: boolean\n}\n\nexport function observer<P extends object, TRef = {}>(\n    baseComponent: React.RefForwardingComponent<TRef, P>,\n    options: IObserverOptions & { forwardRef: true }\n): React.MemoExoticComponent<\n    React.ForwardRefExoticComponent<React.PropsWithoutRef<P> & React.RefAttributes<TRef>>\n>\n\nexport function observer<P extends object>(\n    baseComponent: React.FunctionComponent<P>,\n    options?: IObserverOptions\n): React.FunctionComponent<P>\n\nexport function observer<\n    C extends React.FunctionComponent<any> | React.RefForwardingComponent<any>,\n    Options extends IObserverOptions\n>(\n    baseComponent: C,\n    options?: Options\n): Options extends { forwardRef: true }\n    ? C extends React.RefForwardingComponent<infer TRef, infer P>\n        ? C &\n              React.MemoExoticComponent<\n                  React.ForwardRefExoticComponent<\n                      React.PropsWithoutRef<P> & React.RefAttributes<TRef>\n                  >\n              >\n        : never /* forwardRef set for a non forwarding component */\n    : C & { displayName: string }\n\n// n.b. base case is not used for actual typings or exported in the typing files\nexport function observer<P extends object, TRef = {}>(\n    baseComponent: React.RefForwardingComponent<TRef, P>,\n    options?: IObserverOptions\n) {\n    // The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307\n    if (isUsingStaticRendering()) {\n        return baseComponent\n    }\n\n    const realOptions = {\n        forwardRef: false,\n        ...options\n    }\n\n    const baseComponentName = baseComponent.displayName || baseComponent.name\n\n    const wrappedComponent = (props: P, ref: React.Ref<TRef>) => {\n        return useObserver(() => baseComponent(props, ref), baseComponentName)\n    }\n    wrappedComponent.displayName = baseComponentName\n\n    // memo; we are not interested in deep updates\n    // in props; we assume that if deep objects are changed,\n    // this is in observables, which would have been tracked anyway\n    let memoComponent\n    if (realOptions.forwardRef) {\n        // we have to use forwardRef here because:\n        // 1. it cannot go before memo, only after it\n        // 2. forwardRef converts the function into an actual component, so we can't let the baseComponent do it\n        //    since it wouldn't be a callable function anymore\n        memoComponent = memo(forwardRef(wrappedComponent))\n    } else {\n        memoComponent = memo(wrappedComponent)\n    }\n\n    copyStaticProperties(baseComponent, memoComponent)\n    memoComponent.displayName = baseComponentName\n\n    return memoComponent\n}\n\n// based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js\nconst hoistBlackList: any = {\n    $$typeof: true,\n    render: true,\n    compare: true,\n    type: true\n}\n\nfunction copyStaticProperties(base: any, target: any) {\n    Object.keys(base).forEach(key => {\n        if (!hoistBlackList[key]) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key)!)\n        }\n    })\n}\n","import { useObserver } from \"./useObserver\"\n\ninterface IObserverProps {\n    children?(): React.ReactElement<any>\n    render?(): React.ReactElement<any>\n}\n\nfunction ObserverComponent({ children, render }: IObserverProps) {\n    const component = children || render\n    if (typeof component !== \"function\") {\n        return null\n    }\n    return useObserver(component)\n}\nObserverComponent.propTypes = {\n    children: ObserverPropsCheck,\n    render: ObserverPropsCheck\n}\nObserverComponent.displayName = \"Observer\"\n\nexport { ObserverComponent as Observer }\n\nfunction ObserverPropsCheck(\n    props: { [k: string]: any },\n    key: string,\n    componentName: string,\n    location: any,\n    propFullName: string\n) {\n    const extraKey = key === \"children\" ? \"render\" : \"children\"\n    const hasProp = typeof props[key] === \"function\"\n    const hasExtraProp = typeof props[extraKey] === \"function\"\n    if (hasProp && hasExtraProp) {\n        return new Error(\n            \"MobX Observer: Do not use children and render in the same time in`\" + componentName\n        )\n    }\n\n    if (hasProp || hasExtraProp) {\n        return null\n    }\n    return new Error(\n        \"Invalid prop `\" +\n            propFullName +\n            \"` of type `\" +\n            typeof props[key] +\n            \"` supplied to\" +\n            \" `\" +\n            componentName +\n            \"`, expected `function`.\"\n    )\n}\n","import { observable, runInAction } from \"mobx\"\nimport React from \"react\"\n\nimport { isPlainObject } from \"./utils\"\n\nexport function useAsObservableSourceInternal<TSource>(\n    current: TSource,\n    usedByLocalStore: boolean\n): TSource {\n    const culprit = usedByLocalStore ? \"useLocalStore\" : \"useAsObservableSource\"\n    if (__DEV__ && usedByLocalStore) {\n        const [initialSource] = React.useState(current)\n        if (\n            (initialSource !== undefined && current === undefined) ||\n            (initialSource === undefined && current !== undefined)\n        ) {\n            throw new Error(`make sure you never pass \\`undefined\\` to ${culprit}`)\n        }\n    }\n    if (usedByLocalStore && current === undefined) {\n        return undefined as any\n    }\n    if (__DEV__ && !isPlainObject(current)) {\n        throw new Error(\n            `${culprit} expects a plain object as ${usedByLocalStore ? \"second\" : \"first\"} argument`\n        )\n    }\n\n    const [res] = React.useState(() => observable(current, {}, { deep: false }))\n    if (__DEV__ && Object.keys(res).length !== Object.keys(current).length) {\n        throw new Error(`the shape of objects passed to ${culprit} should be stable`)\n    }\n    runInAction(() => {\n        Object.assign(res, current)\n    })\n    return res\n}\n\nexport function useAsObservableSource<TSource>(current: TSource): TSource {\n    return useAsObservableSourceInternal(current, false)\n}\n","import { observable, runInAction, transaction } from \"mobx\"\nimport React from \"react\"\n\nimport { useAsObservableSourceInternal } from \"./useAsObservableSource\"\nimport { isPlainObject } from \"./utils\"\n\nexport function useLocalStore<TStore extends Record<string, any>>(initializer: () => TStore): TStore\nexport function useLocalStore<TStore extends Record<string, any>, TSource extends object>(\n    initializer: (source: TSource) => TStore,\n    current: TSource\n): TStore\nexport function useLocalStore<TStore extends Record<string, any>, TSource extends object>(\n    initializer: (source?: TSource) => TStore,\n    current?: TSource\n): TStore {\n    const source = useAsObservableSourceInternal(current, true)\n\n    return React.useState(() => {\n        const local = observable(initializer(source))\n        if (isPlainObject(local)) {\n            runInAction(() => {\n                Object.keys(local).forEach(key => {\n                    const value = local[key]\n                    if (typeof value === \"function\") {\n                        // @ts-ignore No idea why ts2536 is popping out here\n                        local[key] = wrapInTransaction(value, local)\n                    }\n                })\n            })\n        }\n        return local\n    })[0]\n}\n\n// tslint:disable-next-line: ban-types\nfunction wrapInTransaction(fn: Function, context: object) {\n    return (...args: unknown[]) => {\n        return transaction(() => fn.apply(context, args))\n    }\n}\n"],"names":["useState","Error","spy","globalIsUsingStaticRendering","useStaticRendering","enable","isUsingStaticRendering","useForceUpdate","setTick","update","useCallback","tick","isPlainObject","value","proto","Object","getPrototypeOf","prototype","getSymbol","name","Symbol","for","mockGlobal","getGlobal","window","global","self","observerBatchingConfiguredSymbol","observerBatching","reactionScheduler","configure","observerBatchingOptOut","undefined","isObserverBatched","printDebugValue","v","getDependencyTree","createTrackingData","reaction","trackingData","cleanAt","Date","now","CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS","CLEANUP_TIMER_LOOP_MILLIS","uncommittedReactionRefs","Set","reactionCleanupHandle","ensureCleanupTimerRunning","setTimeout","cleanUncommittedReactions","scheduleCleanupOfReactionIfLeaked","ref","add","recordReactionAsCommitted","reactionRef","delete","forEach","tracking","current","dispose","size","EMPTY_OBJECT","observerComponentNameFor","baseComponentName","warnedAboutBatching","useObserver","fn","options","console","warn","wantedForceUpdateHook","forceUpdate","reactionTrackingRef","React","useRef","newReaction","Reaction","mounted","useDebugValue","useEffect","Infinity","rendering","exception","track","e","observer","baseComponent","realOptions","forwardRef","displayName","wrappedComponent","props","memoComponent","memo","copyStaticProperties","hoistBlackList","$$typeof","render","compare","type","base","target","keys","key","defineProperty","getOwnPropertyDescriptor","ObserverComponent","children","component","propTypes","ObserverPropsCheck","componentName","location","propFullName","extraKey","hasProp","hasExtraProp","useAsObservableSourceInternal","usedByLocalStore","culprit","initialSource","observable","deep","res","length","runInAction","assign","useAsObservableSource","useLocalStore","initializer","source","local","wrapInTransaction","context","args","transaction","apply"],"mappings":"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"}